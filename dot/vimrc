" ╔═════════════════════════════════════════════════════════════╗
" ║                           Options                           ║
" ╚═════════════════════════════════════════════════════════════╝
set enc=utf-8           "set UTF-8 encoding
set fenc=utf-8
set termencoding=utf-8
set nocompatible        " disable vi compatibility
set t_Co=256
set mouse=a
set expandtab
set tabstop=4
set shiftwidth=4
set autoindent
set sw=4
set nowrap
set hlsearch
set incsearch
set ignorecase          " Ignore case when searching (\c)
set splitbelow
set splitright
set sidescroll=1
set number              " turn line numbers on
set relativenumber      " line number deltas
set showmatch           " highlight matching braces
set backspace=indent,eol,start
" set smartindent

" An  arbitrary key that we use as a namespace for additional key-
" bindings to avoid conflicts with the standard n/v modes.
let mapleader = ','

syntax on " turn syntax highlighting on

" ╔═════════════════════════════════════════════════════════════╗
" ║                        Key Mappings                         ║
" ╚═════════════════════════════════════════════════════════════╝
nnoremap \ i <ESC>l
nnoremap ( O<ESC>j
nnoremap } $
nnoremap { ^
nnoremap <CR> :noh<CR>
nnoremap <SPACE> r l

nnoremap <C-j> 13j
nnoremap <C-k> 13k
vnoremap <C-j> 13j
vnoremap <C-k> 13k

nnoremap Y y$

nnoremap <F4> ^i#<ESC>j
nnoremap <F3> ^xj

nnoremap [ :tabp<CR>
nnoremap ] :tabn<CR> 

" Tab will auto-complete from words in file
inoremap <Tab> <C-n>

" Re-map C-n from autocomplete to the nerd tree.
nnoremap <C-n> :NERDTreeToggle<CR>

vnoremap <Leader>f :!sfmt 65<CR>

" ╔═════════════════════════════════════════════════════════════╗
" ║                          Functions                          ║
" ╚═════════════════════════════════════════════════════════════╝
function DS_title_box()
    execute "normal! :center 61\<CR>"
    "execute "normal! :s/\t/    /g\<CR>"
    execute "normal! O\<ESC>A╔═════════════════════════════════════════════════════════════╗\<ESC>"
    execute "normal! j0i║\<ESC>A                                                                                    ║\<ESC>"
    execute "normal! o\<ESC>0i╚═════════════════════════════════════════════════════════════╝\<ESC>"
    execute "normal! kdwk0"
    execute "normal! i" printf( g:commentstring, getline( '.' ) ) "\<ESC>D0xj0"
    execute "normal! i" printf( g:commentstring, getline( '.' ) ) "\<ESC>D0xj0"
    execute "normal! i" printf( g:commentstring, getline( '.' ) ) "\<ESC>D0xj0"
endfunction

function DS_section_box()
    execute "normal! :center 63\<CR>"
    "execute "normal! :s/\t/    /g\<CR>"
    execute "normal! O\<ESC>A━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\<ESC>"
    execute "normal! j0"
    execute "normal! o\<ESC>0i━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\<ESC>"
    execute "normal! kk0"
    execute "normal! i" printf( g:commentstring, getline( '.' ) ) "\<ESC>D0xj0"
    execute "normal! i" printf( g:commentstring, getline( '.' ) ) "\<ESC>D0xj0"
    execute "normal! i" printf( g:commentstring, getline( '.' ) ) "\<ESC>D0xj0"
endfunction

map <Leader>T :call DS_title_box()<CR>
map <Leader>t :call DS_section_box()<CR>

" ╔═════════════════════════════════════════════════════════════╗
" ║                          Clipboard                          ║
" ╚═════════════════════════════════════════════════════════════╝
" If  vim has clipboard support then just use that by default for
" yanking.
if has( 'clipboard' )
    set clipboard=unnamed
end

" When we either don't have clipboard support or vim can't access
" the system clipboard then we will use these  bindings  to  simu-
" late  it using a temporary file. Note we don't support deleting
" here,  and  also  these only support entire lines as opposed to
" selections within a line.

" Standard paste below cursor
nnoremap <Leader>p  :r     ~/.vimbuf<CR>
" Standard paste above cursor
nnoremap <Leader>P  :.-1r  ~/.vimbuf<CR>
" Yank into tmp file (will yank entire line always)
vnoremap <Leader>y  :w!    ~/.vimbuf<CR>
nmap     <Leader>yy  V<Leader>y

" ╔═════════════════════════════════════════════════════════════╗
" ║                           Buffers                           ║
" ╚═════════════════════════════════════════════════════════════╝
" Set C++11 syntax file for C++
au BufNewFile,BufRead *.cpp,*.hpp,*.h set syntax=cpp11
au BufNewFile,BufRead *.lhs           set syntax=haskell_lit
au BufNewFile,BufRead *.hs            set syntax=haskell
au BufNewFile,BufRead *.mkh           set ft=make

au FileType vim     let g:commentstring="\" %s"
au FileType sh      let g:commentstring="# %s"
au FileType python  let g:commentstring="# %s"
au FileType haskell let g:commentstring="-- %s"
au FileType cpp     let g:commentstring="// %s"
au FileType make    let g:commentstring="# %s"

" Return to last edit position when opening files and make that
" line in the center of the screen.
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"z." |
     \ endif

" ╔═════════════════════════════════════════════════════════════╗
" ║                            netrw                            ║
" ╚═════════════════════════════════════════════════════════════╝
" Default file manager
let g:netrw_banner=0        " no useless banner
let g:netrw_liststyle=3     " tree view
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=2          " open splits to the right

" ╔═════════════════════════════════════════════════════════════╗
" ║                      Themes and Colors                      ║
" ╚═════════════════════════════════════════════════════════════╝
set background=dark

"colorscheme wombat256      " 4/5
"colorscheme sourcerer      " 4/5
"colorscheme hipster      " 4/5
colorscheme scheakur       " 4/5

hi IncSearch cterm=NONE ctermfg=black ctermbg=yellow
hi    Search cterm=NONE ctermfg=black ctermbg=yellow

" ╔═════════════════════════════════════════════════════════════╗
" ║                           Vundle                            ║
" ╚═════════════════════════════════════════════════════════════╝
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins
" :PluginUpdate     - update plugins
" :PluginClean      - confirms removal of unused plugins
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
    " Note: Vundle needs to manage Vundle
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'godlygeek/tabular'
    Plugin 'tpope/vim-fugitive'
    Plugin 'scrooloose/nerdtree'
call vundle#end()            " required

filetype plugin indent on    " required

" ╔═════════════════════════════════════════════════════════════╗
" ║                            Misc                             ║
" ╚═════════════════════════════════════════════════════════════╝

set mouse+=a
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif
