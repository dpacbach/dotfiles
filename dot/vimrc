" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                            Options
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
set nocompatible
set t_Co=256
set mouse=a

" Set 24-bit 'True Color' if supported.
if exists( '+termguicolors' )
  set termguicolors
endif

" Spacing and spaces
set nowrap
set sw=4
set autoindent
set smartindent
set shiftwidth=4
set tabstop=4
set expandtab

" Searching
set hlsearch
set incsearch
set ignorecase          " Ignore case when searching (\c)
set smartcase           " Ignore case unless there is a cap

set splitbelow
set splitright
set sidescroll=1
set number              " turn line numbers on
set relativenumber      " line number deltas
set showmatch           " highlight matching braces
set backspace=indent,eol,start

" This sets the window pane divider char to empty, instead of the
" default |
set fillchars+=vert:\   " Must be a space after \

" Don't show a preview window when autocompleting.
set completeopt-=preview

syntax on
" If syntax file supports it (with Spell/NoSpell directives) then
" this will cause spelling to be checked in code comments (in  ad-
" dition to normal text files).
"set spell spelllang=en_us

" milliseconds.  Don't make it too low...
set updatetime=250

" This apparently fixes the 'escape time delay', a delay that
" happens after hitting the escape key (since vim is waiting for
" further characters to form a sequence). This makes that delay
" zero without affecting keys that use an escape character (such
" as arrow keys).
set timeoutlen=1000 ttimeoutlen=0

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                           Utilities
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

let g:space_char = ' '

function! s:UsingPython3()
    if has( 'python3' )
        return 1
    endif
    return 0
endfunction

let s:using_python3 = s:UsingPython3()

function! s:Pyeval( eval_string )
    if s:using_python3
        return py3eval( a:eval_string )
    endif
    return pyeval( a:eval_string )
endfunction

" This allows us to run an external command which, when finished,
" causes control to pass back to vim with the screen redrawn and
" with vim now waiting for the user to press enter.
command! -nargs=1 Silent
      \   execute 'silent !' . <q-args>
      \ | execute 'redraw!'

function! InGoogleCloud()
  return getcwd() =~ 'cloud.*google3'
endfunction

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                           Status Bar
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" In the following code  we  set  the  `statusline` variable as a
" local variable (setl) so that we  get  a  status  bar  that  is
" unique to each given buffer.
"
" Status bar always visible
set laststatus=2

" Currently disabled because it cause display problems (random
" keys pressed in normal mode appear in the buffer, then disappear
" when display is refreshed).
"function! GitBranch()
"    let l:cmd = 'git rev-parse --abbrev-ref HEAD'
"    return system(l:cmd . " 2>/dev/null | tr -d '\n'")
"endfunction

"function! StatuslineGit()
"    let l:branchname = GitBranch()
"    return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
"endfunction

" This  function  inserts  a small piece of text into the current
" statusline  variable  giving  the  status  of  YCM's background
" parsing request. If there is  is  a  file parse request pending
" for the current buffer then this will show a series  of  dashes.
" If  the  parse request is complete then it will show the number
" of errors, which may be zero. Also, different status of colored
" accordingly.
function! GetYcmStatus()
    if !s:Pyeval( "'ycm_state' in globals()" )
        return
    endif
    if !s:Pyeval( "ycm_state.ShouldDisplayDiagnostics()" )
        " If we're here then this is likely not a file or  buffer
        " type where YCM will be used, so just suppress the  indi-
        " cator altogether.
        return
    endif
    let g:ycm_status_begin = ' ['
    setl statusline+=%{g:ycm_status_begin}
    if !s:Pyeval( "ycm_state.CheckIfServerIsReady()" )
        if winnr('$') == 1
            setl statusline+=%#SpecialKey#
        endif
        setl statusline+=---------
    elseif s:Pyeval( "ycm_state.FileParseRequestReady()" )
        let g:ycm_n_errors = s:Pyeval( 'ycm_state.GetErrorCount()' )
        let g:ycm_n_warnings = s:Pyeval( 'ycm_state.GetWarningCount()' )
        if g:ycm_n_errors > 0
            let g:ycm_status_middle = 'errors: '
            setl statusline+=%#ErrorMsg#
            setl statusline+=%{g:ycm_status_middle}
            setl statusline+=%{g:ycm_n_errors}
            setl statusline+=%#StatusLineNC#
        elseif g:ycm_n_warnings > 0
            let g:ycm_status_middle = 'warnings: '
            setl statusline+=%#SyntasticWarningSign#
            setl statusline+=%{g:ycm_status_middle}
            setl statusline+=%{g:ycm_n_warnings}
            setl statusline+=%#StatusLineNC#
        else
            if winnr('$') == 1
                setl statusline+=%#SpecialKey#
            endif
            setl statusline+=no\ errors
        endif
    else
        setl statusline+=%#WarningMsg#
        setl statusline+=compiling
        setl statusline+=%#StatusLineNC#
    endif
    if winnr('$') == 1
        setl statusline+=%#LineNr#
    endif
    let g:ycm_status_end = ']'
    setl statusline+=%{g:ycm_status_end}
endfunction

" Vim  allows  one to put function calls inline in the status bar
" text so that they will be called  whenever the status bar is up-
" dated. However, we don't do that since  some  of  the  function
" calls have overhead, and the status bar is  updated  each  time
" the cursor moves. So instead, we  just put the status update in
" a timer function that updates the status variable.
"
" The winnr('$') calls are to test if we only have a single window
" open, in which case we make the status bar background color to be
" darker since it looks better.
let g:status_update_timer =
  \ timer_start(1000, 'UpdateStatusBar',{'repeat':-1})
function! UpdateStatusBar(timer)
    setl statusline=
    "set statusline+=%#PmenuSel#
    "let g:git_status = StatuslineGit()
    "set statusline+=%{g:git_status}
    if winnr('$') == 1 && a:timer != 2
        setl statusline+=%#LineNr#
    else
        setl statusline+=%#StatusLineNC#
    endif
    setl statusline+=\ %f
    call GetYcmStatus()
    setl statusline+=%m
    setl statusline+=%=
    if winnr('$') == 1
        setl statusline+=%#Identifier#
    endif
    if exists('g:tagbar_autoclose')
        setl statusline+=%{tagbar#currenttag('%s\ ','')}
    endif
    setl statusline+=\ %y
    setl statusline+=\ %p%%
    setl statusline+=\ %l:%2c
    let g:space_char = ' '
    setl statusline+=%{g:space_char}
endfunction

" Seems  that  when  we  leave a window the timer function may no
" longer  be  called, and so we need to update the status bar one
" last time before leaving so that any changes can go into effect
" that  depend  on  the number of windows there are. Normally the
" argument to the function would be the timer, but here we pass a
" `2` to signal that a) we are manually calling  it,  and  b)  we
" want it to assume that there are multiple windows.
au WinLeave * :call UpdateStatusBar(2)

" Initially we want to update the  status bar without waiting for
" the timer to start running. Normally the argument to  the  func-
" tion would be the timer, but here  we pass a `1` to signal that
" a) we are manually calling it, and b) we want it to assume that
" there is only one window.
:call UpdateStatusBar(1)

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                              Undo
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" For each edited file vim will persist all the undo info for
" all history in a .*~ file in central location.
set undofile
set undodir=~/.vim/undo

" The Undo diff view will be in a new window below the file being
" edited instead of (the default, which is) to place it below the
" graph view on the left.
let g:mundo_preview_bottom = 1

" Close the Undo view automatically when reverting (i.e., when
" hitting enter on a node).
let g:mundo_close_on_revert = 1

" This toggles the Mundo (plugin) undo tree  window.  The  reason
" for the two <CR>'s is because this command  normally  seems  to
" cause  a 'Press ENTER...' prompt to appear the first time it is
" started in a vim session which is  somewhat  annoying,  and  so
" this seems to be be a workaround that fixes that.
nnoremap U :MundoToggle<CR><CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                          The Leader
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" An  arbitrary key that we use as a namespace for additional key-
" bindings to avoid conflicts with the standard n/v modes.
let mapleader = ','

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                         Key Mappings
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nnoremap \ i <ESC>l
nnoremap ( O<ESC>j
nnoremap } $
nnoremap { ^
nnoremap <Leader>[ :tabm -1<CR>
nnoremap <Leader>] :tabm +1<CR>
nnoremap <CR> :noh<CR>
nnoremap <SPACE> r l

nnoremap Y y$

" Saves all changes in all buffers before making.
nnoremap <F5> :!make run -k -j8<CR>
nnoremap <F6> :!make all -k -j8<CR>
nnoremap <F7> :!bash -c "make all -j1 2>&1 \| head -n 50"<CR>

" This function changes the standard `z.` so that if it is pressed twice
" within one second then the first time it is pressed it will move the
" current line to the center of the screen as usual, but the second time it
" will move the current line up to that line which is 20% of the way down
" from the top of the screen. However, a second press of z. more than one
" seconds after the first one still perform the standard behavior of moving
" to the center line.
let g:zee_dot_timer = reltime()
function! ZeeDot()
  let l:zee_delta = reltime(g:zee_dot_timer)[0]
  if l:zee_delta < 1
    let l:target = &lines/5
    let l:curr = line('.') - line('w0')
    if l:curr != l:target
      if l:curr > l:target
        call feedkeys( (l:curr-l:target) . "\<C-e>" )
      else
        call feedkeys( (l:target-l:curr) . "\<C-y>" )
      endif
    endif
  else
    call feedkeys('zz')
  endif
  let g:zee_dot_timer = reltime()
endfunction
nnoremap z. :call ZeeDot()<CR>

" If these are slow then there might be some vim file somewhere
" that is creating a two-character binding starting with [ or ],
" such as e.g. /usr/share/vim/vim80/ftplugin/python.vim.  These
" bindings should be removed using e.g.:
"
"   au FileType bzl unmap <buffer> ]]
"   ...
"
" This slowness would manifest as an ~ 1 sec delay when switching
" tabs *away* from a tab in which the selected window contains
" a buffer that has e.g. the [[ keymapping.
nnoremap [ :tabp<CR>
nnoremap ] :tabn<CR> 

" Shift-q will close all windows; this is useful when there are
" multiple windows open and you want to exit vim without having
" to type :q<CR> for each one of them.
nnoremap Q :qa<CR>

" Tab will auto-complete from words in file
"inoremap <Tab> <C-n>

" Re-map C-n from autocomplete to the nerd tree.
nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <C-p> :NERDTreeFocus<CR>
" Find current file in NERDTree and expand tree to reveal it.
nnoremap <Leader>n :NERDTreeFind<CR>
let NERDTreeWinSize = 19
if &columns > 190
  let NERDTreeWinSize += 11
endif
if &columns > 230
  let NERDTreeWinSize += 10
endif

vnoremap <Leader>f :!sfmt 65<CR>

" These are `back` and `forward`  actions, analogous to web brows-
" ing.  However  we  swap  them  because <C-I> "should" represent
" `back` because it is to the left of the 'O' key and the  `back`
" button is always positioned to the left of the `forward` button
" in a web browser.
nnoremap <C-I> <C-O>
nnoremap <C-O> <C-I>

" Move windows easily.
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
inoremap <C-H> <ESC><C-W>h
inoremap <C-L> <ESC><C-W>l
inoremap <C-J> <ESC><C-W>j
inoremap <C-K> <ESC><C-W>k

" The `Imprecise` variants will perform  the operation without re-
" compiling the translation unit.  Useful  if compilation is slow,
" but can yield incorrect results if the file is out of date (not
" sure when this would happen  though,  since  YCM seems to recom-
" pile the file as one types).
nnoremap <Leader>eg :YcmCompleter GoTo<CR>
nnoremap <Leader>eG :YcmCompleter GoToReferences<CR>
nnoremap <Leader>et :YcmCompleter GetType<CR>
nnoremap <Leader>ef :YcmCompleter FixIt<CR>
nnoremap <Leader>ep :YcmCompleter GetParent<CR>
nnoremap <Leader>es :YcmShowDetailedDiagnostic<CR>
nnoremap <Leader>er :YcmForceCompileAndDiagnostics<CR>
nnoremap <Leader>ee :YcmDiags<CR>

let g:llvm_home = $HOME . '/dev/tools/llvm-current'

function! ClangFormatAll()
  if InGoogleCloud()
    return
  endif
  "let l:formatdiff = 1
  let l:lines = '1:' . line( '$' )
  let g:clang_format_path = g:llvm_home . '/bin/clang-format'
  exec ':py3f ' . g:llvm_home . '/share/clang/clang-format.py'
endfunction

" Since vim does not use Control-C to exit/kill we can map it to
" something else, so we map it to invoke clang-format on the
" current file.
nnoremap <C-C> :call ClangFormatAll()<CR>

" This allows one to alternate between .cpp and .hpp files so long
" as they are in the current directory.  It works by [e]diting the
" file whose name is the current one except with the extension .cpp
" changed to .hpp, and .hpp changed first to .X123X and then to .cpp.
nnoremap <Leader>s :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>
" This variant will do the same as above, but will search for the
" token under the cursor in the new file (from the top) once loaded.
nnoremap <Leader>S * :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>ggn

" EasyMotions controls.
nmap ; <Plug>(easymotion-bd-w)
vmap ; <Plug>(easymotion-bd-w)

function! ReplaceWord()
    let l:w = expand( "<cword>" )
    call feedkeys( ":%s/" . l:w . "//g\<Left>\<Left>" )
endfunction
nnoremap <Leader>r :call ReplaceWord()<CR>

" Enable GDB integration.  This is an auto command because it
" seems that if we issue this anywhere in the vimrc file itself
" then the debugging interface does not have the right colors (?).
" So we use an auto-load command which likely works because it
" loads it after the colorscheme is loaded.
au BufRead *.cpp,*.c :packadd termdebug

" Key bindings for use during debugging from the source window.
nnoremap <Leader>gb :Break<CR>
nnoremap <Leader>gn :Over<CR>
nnoremap <Leader>gs :Step<CR>
nnoremap <Leader>gc :Cont<CR>
nnoremap <Leader>gx :Clear<CR>
nnoremap <Leader>ge :Evaluate<CR>
nnoremap <Leader>gr :Run<CR>

" Use a vertical split in debug mode.
let g:termdebug_wide = 1

" Call the :Ag function with the current word-under-cursor as
" first argument.
function! AgWord()
    let l:w = expand( "<cword>" )
    call feedkeys( ':Ag ' . l:w . "\<CR>" )
endfunction

" Mappings for the fzf.vim plugin.
" Files under CWD.
nnoremap <C-T> :Files<CR>
" <Leader>tt is reserved for global files.
nmap <Leader>ts :GFiles?<CR>
nmap <Leader>tl :Lines<CR>
nmap <Leader>tb :BLines<CR>
nmap <Leader>ta :Ag<CR>
nmap <Leader>tw :call AgWord()<CR>
nmap <F4> :Ag<CR>

let g:fzf_height = '20%'

" Set current directory to current file with ,cd
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>

" Open/close code-outline window (TagBar plugin).
nnoremap <Leader>o :TagbarOpenAutoClose<CR>
" This one will open it so that it stays open (TagbarOpen) but
" then call TagbarOpenAutoClose just to switch cursor focus to it.
nnoremap <Leader>O :TagbarOpen<CR>:TagbarOpenAutoClose<CR>
"
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                        Variable Settings
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

let g:tagbar_width = 19
if &columns > 190
  let g:tagbar_width += 11
endif
if &columns > 230
  let g:tagbar_width += 10
endif
let g:tagbar_show_linenumbers = 2
let g:tagbar_sort = 0
let g:tagbar_singleclick = 1

" This  option controls the key mapping used to invoke the comple-
" tion menu for semantic completion. By default, semantic  comple-
" tion  is  triggered  automatically after typing ., -> and :: in
" insert  mode  (if semantic completion support has been compiled
" in). This key mapping can be used to  trigger  semantic  comple-
" tion anywhere. Useful for searching for top-level functions and
" classes. This applies in INSERT mode.
let g:ycm_key_invoke_completion = '<C-S>'
" This tells YCM to populate the location list with errors.
let g:ycm_always_populate_location_list = 1
" These characters appear in the gutter on error.
"let g:ycm_error_symbol = '→'   " default is '>>'
"let g:ycm_error_symbol = '✖'   " default is '>>'
let g:ycm_error_symbol = 'X'  " default is '>>'
let g:ycm_warning_symbol = '**'  " default is '>>'

"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 0

" This will cause the error signs to appear over the line numbers
" instead of putting them in the 'gutter' and taking up an extra
" line of horizontal space.
set signcolumn=number

" Whitelist of .ycm_extra_conf.py  files  which  will  be  loaded
" without asking the user  permission  each  time. Items starting
" with a '!' character  will  be  blacklisted; items not starting
" with '!' are whitelists. Stars are globs.  Most projects just
" have a symlink to this single file in the /nr-make/ folder.
let g:ycm_extra_conf_globlist = [
  \ '~/dev/nr-make/ycm_extra_conf.py',
  \ '~/dev/revolution-now-game/.ycm_extra_conf.py'
  \ ]

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                          Auto-Highlight
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Highlight all instances of word under cursor, when idle. Useful
" when studying strange source code.
"
" Type <Leader>* to toggle highlighting on/off.
"
" Adapted from:
"     vim.wikia.com/wiki/Auto_highlight_current_word_when_idle

nnoremap <Leader>* :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>

function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=250
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                           Clipboard
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" If  vim has clipboard support then just use that by default for
" yanking.
if has( 'clipboard' )
    set clipboard=unnamed
end

" When we either don't have clipboard support or vim can't access
" the system clipboard then we will use these  bindings  to  simu-
" late  it using a temporary file. Note we don't support deleting
" here,  and  also  these only support entire lines as opposed to
" selections within a line.

" Standard paste below cursor
nnoremap <Leader>p  :r     ~/.vimbuf<CR>
" Standard paste above cursor
nnoremap <Leader>P  :.-1r  ~/.vimbuf<CR>
" Yank into tmp file (will yank entire line always)
vnoremap <Leader>y  :w!    ~/.vimbuf<CR>
nmap     <Leader>yy  V<Leader>y

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                             netrw
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Default file manager
let g:netrw_banner=0        " no useless banner
let g:netrw_liststyle=3     " tree view
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=2          " open splits to the right

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                            Vundle
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins
" :PluginUpdate     - update plugins
" :PluginClean      - confirms removal of unused plugins
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

let g:cpp_no_function_highlight = 1
let g:c_no_curly_error=1
"let g:cpp_member_variable_highlight = 1
"let g:cpp_class_decl_highlight = 1

call vundle#begin()
    " Note: Vundle needs to manage Vundle
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'godlygeek/tabular'         " Auto alignment
    Plugin 'tpope/vim-fugitive'        " Git integration
    Plugin 'scrooloose/nerdtree'       " File manager
    Plugin 'easymotion/vim-easymotion' " Web-browser-like navigation overlays
    Plugin 'scrooloose/nerdcommenter'  " Auto comment manipulation
    "Plugin 'raimondi/delimitmate'      " Auto closing of quotes, parens, etc.
    Plugin 'simnalamburt/vim-mundo'    " Undo tree interaction
    Plugin 'morhetz/gruvbox'           " colorscheme
    Plugin 'junegunn/fzf'              " fuzzy searching
    Plugin 'junegunn/fzf.vim'          " vim plugin for fzf
    Plugin 'terryma/vim-expand-region' " expand selected region
    Plugin 'majutsushi/tagbar'         " Code outline window
    Plugin 'tibabit/vim-templates'     " file templates with placeholders
    Plugin 'octol/vim-cpp-enhanced-highlight'
if ! InGoogleCloud()
    Plugin 'valloric/youcompleteme'
endif
if InGoogleCloud()
    Plugin 'natebosch/vim-lsc'
endif
call vundle#end()            " required

filetype plugin indent on    " required

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                            Buffers
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Put these after the plugin stuff above since it looks like some
" syntax settings can be overwridden there.
au BufNewFile,BufRead *.cc,*.cpp,*.hpp,*.h set syntax=cpp11
au BufNewFile,BufRead *.inl                set syntax=cpp11
au BufNewFile,BufRead *.cc,*.cpp,*.hpp,*.h set ft=cpp
au BufNewFile,BufRead *.lhs                set syntax=haskell_lit
au BufNewFile,BufRead *.hs                 set syntax=haskell
au BufNewFile,BufRead *.hs                 set ft=haskell
au BufNewFile,BufRead *.mkh                set ft=make
au BufNewFile,BufRead *.fish               set syntax=fish
au BufNewFile,BufRead *.ucl                set syntax=yaml
au BufNewFile,BufRead *.dart               set syntax=dart

au FileType vim     let g:commentstring="\" %s"
au FileType sh      let g:commentstring="# %s"
au FileType python  let g:commentstring="# %s"
au FileType haskell let g:commentstring="-- %s"
au FileType cpp     let g:commentstring="// %s"
au FileType make    let g:commentstring="# %s"

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                             Themes
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" If there is no colorscheme already  set  then this will set one.
" It  will  be  called as an auto command after the auto commands
" used to set the colorscheme for particular file types.
function! SetDefaultColorScheme()
    " colorschemes:
    "    wombat256   sourcerer
    "    hipster     scheakur
    "    gruvbox     primary
    try
        :silent echo g:colors_name
    catch /E121/
        colorscheme gruvbox
    endtry
    "highlight YcmWarningLine guibg=#ffff00 guifg=#000000
    "highlight YcmErrorLine   guibg=#ff0000 guifg=#000000
endfunction

set background=dark

" These set file-type-specific rules for colorschemes
au FileType haskell colorscheme sourcerer
au BufEnter sh      colorscheme sourcerer

au BufEnter * :call SetDefaultColorScheme()

hi IncSearch cterm=NONE ctermfg=black ctermbg=yellow
hi    Search cterm=NONE ctermfg=black ctermbg=yellow

" Return  to  last edit position when opening files and make that
" line in the center of the screen.
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"z." |
     \ endif

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                              Misc
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" This  was inserted to allow using the mouse to resize vim panes
" from within a tmux pane.
set mouse+=a
set ttymouse=sgr
"if &term =~ '^screen'
"    " tmux knows the extended mouse mode
"    set ttymouse=xterm2
"endif

" If  NerdTree  is  the only open window then quit from it, effec-
" tively quitting vim if only NerdTree is open.
function! ExitIfOnlyNerdTree()
    if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())
        q
    endif
endfunction

autocmd bufenter * :call ExitIfOnlyNerdTree()

" This disables the intro  message  that  appears when vim starts.
set shortmess=I " Read :help shortmess for everything else.

" This flag to the vim-hardtime plugin enables it for all buffers.
" When enabled, the hjkl/arrow keys are limited to one per second
" in order to encourage learning and using vim's more advanced
" motions.
"let g:hardtime_default_on = 1

" Limit the number of VCS's that vim-signify searches for.
let g:signify_vcs_list = ['git', 'perforce']

" Detect if we are in diff mode, e.g. `vimdiff`
if &diff
    " setup for diff mode
    set cmdheight=2
else
    " setup for non-diff mode
    set cmdheight=1
endif

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                             Local
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if filereadable(glob("~/.vimrclocal"))
    source ~/.vimrclocal
endif

" Somehow we need this  after  the  .vimrclocal otherwise it gets
" disabled, and then only for some fish files... strange.
au BufNewFile,BufRead *.fish set syntax=fish

" Project-specific vimrc files. This setting causes vim to load
" the .vimrc file in the current directory in addition to this
" one.
set exrc
" Do not allow unsafe commands (such as shell commands) in
" project-specific vimrc files.
set secure
