" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                            Options
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
set nocompatible
set t_Co=256
set mouse=a
set expandtab
set tabstop=4
set shiftwidth=4
set autoindent
set sw=4
set nowrap
set hlsearch
set incsearch
set ignorecase          " Ignore case when searching (\c)
set splitbelow
set splitright
set sidescroll=1
set number              " turn line numbers on
set relativenumber      " line number deltas
set showmatch           " highlight matching braces
set backspace=indent,eol,start
" set smartindent
syntax on

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                              Undo
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" For each edited file vim will persist all the undo info for
" all history in a .*~ file in the same folder as the file.
set undofile

" The Undo diff view will be in a new window below the file being
" edited instead of (the default, which is) to place it below the
" graph view on the left.
let g:mundo_preview_bottom = 1

" This toggles the Mundo (plugin) undo tree  window.  The  reason
" for the two <CR>'s is because this command  normally  seems  to
" cause  a 'Press ENTER...' prompt to appear the first time it is
" started in a vim session which is  somewhat  annoying,  and  so
" this seems to be be a workaround that fixes that.
nnoremap U :MundoToggle<CR><CR>

" An  arbitrary key that we use as a namespace for additional key-
" bindings to avoid conflicts with the standard n/v modes.
let mapleader = ','

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                         Key Mappings
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nnoremap \ i <ESC>l
nnoremap ( O<ESC>j
nnoremap } $
nnoremap { ^
nnoremap <CR> :noh<CR>
nnoremap <SPACE> r l

nnoremap <C-j> 13j
nnoremap <C-k> 13k
vnoremap <C-j> 13j
vnoremap <C-k> 13k

nnoremap Y y$

nnoremap <F4> ^i#<ESC>j
nnoremap <F3> ^xj

nnoremap [ :tabp<CR>
nnoremap ] :tabn<CR> 

" Tab will auto-complete from words in file
"inoremap <Tab> <C-n>

" Re-map C-n from autocomplete to the nerd tree.
nnoremap <C-n> :NERDTreeToggle<CR>

vnoremap <Leader>f :!sfmt 65<CR>

" These are `back` and `forward`  actions, analogous to web brows-
" ing.  However  we  swap  them  because <C-I> "should" represent
" `back` because it is to the left of the 'O' key and the  `back`
" button is always positioned to the left of the `forward` button
" in a web browser.
nnoremap <C-I> <C-O>
nnoremap <C-O> <C-I>

nnoremap <Leader>eg :YcmCompleter GoTo<CR>
nnoremap <Leader>et :YcmCompleter GetType<CR>
nnoremap <Leader>ef :YcmCompleter FixIt<CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                           Clipboard
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" If  vim has clipboard support then just use that by default for
" yanking.
if has( 'clipboard' )
    set clipboard=unnamed
end

" When we either don't have clipboard support or vim can't access
" the system clipboard then we will use these  bindings  to  simu-
" late  it using a temporary file. Note we don't support deleting
" here,  and  also  these only support entire lines as opposed to
" selections within a line.

" Standard paste below cursor
nnoremap <Leader>p  :r     ~/.vimbuf<CR>
" Standard paste above cursor
nnoremap <Leader>P  :.-1r  ~/.vimbuf<CR>
" Yank into tmp file (will yank entire line always)
vnoremap <Leader>y  :w!    ~/.vimbuf<CR>
nmap     <Leader>yy  V<Leader>y

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                             netrw
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Default file manager
let g:netrw_banner=0        " no useless banner
let g:netrw_liststyle=3     " tree view
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=2          " open splits to the right

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                            Vundle
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins
" :PluginUpdate     - update plugins
" :PluginClean      - confirms removal of unused plugins
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
    " Note: Vundle needs to manage Vundle
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'godlygeek/tabular'         " Auto alignment
    Plugin 'tpope/vim-fugitive'        " Git integration
    Plugin 'scrooloose/nerdtree'       " File manager
    Plugin 'easymotion/vim-easymotion' " Web-browser-like navigation overlays
    Plugin 'scrooloose/nerdcommenter'  " Auto comment manipulation
    Plugin 'raimondi/delimitmate'      " Auto closing of quotes, parens, etc.
    Plugin 'simnalamburt/vim-mundo'    " Undo tree interaction
    " Colorschemes
    Plugin 'morhetz/gruvbox'
call vundle#end()            " required

filetype plugin indent on    " required

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                            Buffers
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Put these after the plugin stuff above since it looks like some
" syntax settings can be overwridden there.
au BufNewFile,BufRead *.cc,*.cpp,*.hpp,*.h set syntax=cpp11
au BufNewFile,BufRead *.cc,*.cpp,*.hpp,*.h set ft=cpp
au BufNewFile,BufRead *.lhs                set syntax=haskell_lit
au BufNewFile,BufRead *.hs                 set syntax=haskell
au BufNewFile,BufRead *.hs                 set ft=haskell
au BufNewFile,BufRead *.mkh                set ft=make
au BufNewFile,BufRead *.fish               set syntax=fish

au FileType vim     let g:commentstring="\" %s"
au FileType sh      let g:commentstring="# %s"
au FileType python  let g:commentstring="# %s"
au FileType haskell let g:commentstring="-- %s"
au FileType cpp     let g:commentstring="// %s"
au FileType make    let g:commentstring="# %s"

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                             Themes
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" If there is no colorscheme already  set  then this will set one.
" It  will  be  called as an auto command after the auto commands
" used to set the colorscheme for particular file types.
function SetDefaultColorScheme()
    " colorschemes:
    "    wombat256   sourcerer
    "    hipster     scheakur
    "    gruvbox     primary
    try
        echo g:colors_name
    catch /E121/
        colorscheme gruvbox
    endtry
endfunction

set background=dark

" These set file-type-specific rules for colorschemes
au FileType haskell colorscheme hipster
au BufEnter sh      colorscheme sourcerer

au BufEnter * :call SetDefaultColorScheme()

hi IncSearch cterm=NONE ctermfg=black ctermbg=yellow
hi    Search cterm=NONE ctermfg=black ctermbg=yellow

" Return  to  last edit position when opening files and make that
" line in the center of the screen.
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"z." |
     \ endif

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                              Misc
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" This  was inserted to allow using the mouse to resize vim panes
" from within a tmux pane.
set mouse+=a
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"                             Local
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if filereadable(glob("~/.vimrclocal"))
    source ~/.vimrclocal
endif

" Somehow we need this  after  the  .vimrclocal otherwise it gets
" disabled, and then only for some fish files... strange.
au BufNewFile,BufRead *.fish set syntax=fish

" This disables the intro  message  that  appears when vim starts.
set shortmess=I " Read :help shortmess for everything else.
